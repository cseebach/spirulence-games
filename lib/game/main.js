// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ig.module('game.main').requires('impact.game', 'impact.font').defines(function() {
    var BackGround, Borehole, BuildQueue, BuildingButton, DomeGenerator, Factory, Generator, Mine, MyGame, Placeable, QuantomOptoComptroller, ResearchCenter, Supercollider, advRobotics, extremeRobotics, highEnergyPhysics, quantumComputing, secretsOfTheUniverse, techs, theoryOfEverything;
    Placeable = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      mineralsConsumed: 0,
      mineralsProduced: 0,
      energyConsumed: 0,
      energyProduced: 0,
      productionProduced: 0,
      productionCost: 0,
      research: 0,
      placed: false,
      init: function(x, y, settings) {
        return this.parent(x, y, settings);
      },
      canPlace: function() {
        if (this.getMineralsConsumed() > ig.game.mineralsProduced - ig.game.mineralsConsumed) {
          ig.game.alerts.push({
            time: 120,
            text: "Can't place building: not enough minerals."
          });
          return false;
        }
        if (this.getEnergyConsumed() > ig.game.energyProduced - ig.game.energyConsumed) {
          ig.game.alerts.push({
            time: 120,
            text: "Can't place building: not enough energy."
          });
          return false;
        }
        return true;
      },
      place: function() {
        this.placed = true;
        return this.currentAnim.alpha = 1;
      },
      getMineralsConsumed: function() {
        return this.mineralsConsumed;
      },
      getMineralsProduced: function() {
        return this.mineralsProduced;
      },
      getEnergyConsumed: function() {
        return this.energyConsumed;
      },
      getEnergyProduced: function() {
        return this.energyProduced;
      },
      getProductionProduced: function() {
        return this.productionProduced;
      },
      getProductionCost: function() {
        return this.productionCost;
      },
      getResearch: function() {
        return this.research;
      }
    });
    DomeGenerator = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/dome_generator.png", 16, 16),
      energyConsumed: 100,
      productionCost: 3000,
      name: "Dome Generator",
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
      },
      place: function() {
        var generators, numGenerators, _ref;
        this.parent();
        generators = ig.game.getEntitiesByType(DomeGenerator);
        numGenerators = generators.length;
        if (_ref = ig.game.placeEntity, __indexOf.call(generators, _ref) >= 0) {
          numGenerators -= 1;
        }
        if (numGenerators >= 4) {
          ig.game.winning = true;
          return ig.game.winCondition = "generators";
        }
      }
    });
    QuantomOptoComptroller = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/qo_comptroller.png", 16, 16),
      energyConsumed: 10,
      productionCost: 1000,
      name: "Quantum-Optical Comptroller",
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 1, 2, 3]);
      },
      getEnergyProduced: function() {
        var energyProduced, generator, generators, _i, _len;
        generators = (function() {
          var _i, _len, _ref, _results;
          _ref = ig.game.getEntitiesByType(Generator);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            generator = _ref[_i];
            if (generator.placed) {
              _results.push(generator);
            }
          }
          return _results;
        })();
        energyProduced = 0;
        for (_i = 0, _len = generators.length; _i < _len; _i++) {
          generator = generators[_i];
          if (generator.distanceTo(this) < 30) {
            energyProduced += 5;
          }
        }
        return energyProduced;
      }
    });
    Supercollider = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/supercollider.png", 16, 16),
      research: 30,
      energyConsumed: 50,
      productionCost: 1000,
      name: "Supercollider",
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      },
      getResearch: function() {
        var center, research, researchCenters, _i, _len;
        researchCenters = (function() {
          var _i, _len, _ref, _results;
          _ref = ig.game.getEntitiesByType(ResearchCenter);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            center = _ref[_i];
            if (center.placed) {
              _results.push(center);
            }
          }
          return _results;
        })();
        research = this.research;
        for (_i = 0, _len = researchCenters.length; _i < _len; _i++) {
          center = researchCenters[_i];
          if (center.distanceTo(this) < 30) {
            research += 10;
          }
        }
        return research;
      }
    });
    ResearchCenter = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/research_center.png", 16, 16),
      energyConsumed: 10,
      research: 10,
      productionCost: 100,
      name: "Research Center",
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      }
    });
    Borehole = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/borehole.png", 16, 16),
      energyConsumed: 20,
      productionCost: 200,
      mineralsProduced: 20,
      name: "Asthenosphere Borehole",
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      },
      getMineralsProduced: function() {
        var mine, mineralsProduced, mines, _i, _len;
        mines = (function() {
          var _i, _len, _ref, _results;
          _ref = ig.game.getEntitiesByType(Mine);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            mine = _ref[_i];
            if (mine.placed) {
              _results.push(mine);
            }
          }
          return _results;
        })();
        mineralsProduced = this.mineralsProduced;
        for (_i = 0, _len = mines.length; _i < _len; _i++) {
          mine = mines[_i];
          if (mine.distanceTo(this) < 30) {
            mineralsProduced += 5;
          }
        }
        return mineralsProduced;
      }
    });
    Generator = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      name: "Wind Generator",
      animSheet: new ig.AnimationSheet('media/generator.png', 16, 16),
      productionCost: 40,
      energyProduced: 6,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0, 1]);
      }
    });
    Mine = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/mine.png", 16, 16),
      name: "Mine",
      energyConsumed: 2,
      mineralsProduced: 3,
      productionCost: 40,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.2, [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0]);
      },
      getMineralsProduced: function() {
        var mineralsProduced;
        mineralsProduced = this.mineralsProduced;
        if (advRobotics.researched) {
          mineralsProduced += 1;
        }
        if (extremeRobotics.researched) {
          mineralsProduced += 1;
        }
        return mineralsProduced;
      }
    });
    Factory = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/factory.png", 16, 16),
      name: "Factory",
      energyConsumed: 6,
      mineralsConsumed: 6,
      productionProduced: 3,
      productionCost: 100,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.4, [0, 1]);
      }
    });
    BackGround = ig.Entity.extend({
      size: {
        x: 320,
        y: 240
      },
      zIndex: 50,
      animSheet: new ig.AnimationSheet("media/background.png", 320, 240),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0]);
      }
    });
    BuildingButton = ig.Class.extend({
      buttonBack: new ig.Image("media/button.png"),
      init: function(x, y, buildingClass, enabled) {
        this.instance = new buildingClass();
        this.x = x;
        this.y = y;
        this.size = 16;
        this.buildingClass = buildingClass;
        this.enabled = enabled != null ? enabled : true;
        this.hovered = false;
        return this.queue = [];
      },
      update: function() {
        var buildMessage, _ref, _ref1;
        if ((this.x < (_ref = ig.input.mouse.x) && _ref < this.x + this.size) && (this.y < (_ref1 = ig.input.mouse.y) && _ref1 < this.y + this.size) && this.enabled) {
          this.hovered = true;
          ig.game.hoverInfo = this.instance.name;
          buildMessage = [];
          if (this.instance.getMineralsConsumed() > 0) {
            buildMessage.push(sprintf("M-%.0d", this.instance.getMineralsConsumed()));
          }
          if (this.instance.getMineralsProduced() > 0) {
            buildMessage.push(sprintf("M+%.0d", this.instance.getMineralsProduced()));
          }
          if (this.instance.getEnergyConsumed() > 0) {
            buildMessage.push(sprintf("E-%.0d", this.instance.getEnergyConsumed()));
          }
          if (this.instance.getEnergyProduced() > 0) {
            buildMessage.push(sprintf("E+%.0d", this.instance.getEnergyProduced()));
          }
          if (this.instance.getProductionCost() > 0) {
            buildMessage.push(sprintf("P%.0d", this.instance.getProductionCost()));
          }
          if (this.instance.getProductionProduced() > 0) {
            buildMessage.push(sprintf("P+%.0d", this.instance.getProductionProduced()));
          }
          if (this.instance.getResearch() > 0) {
            buildMessage.push(sprintf("R+%.0d", this.instance.getResearch()));
          }
          ig.game.buildMessage = buildMessage.join(" ");
          if (ig.input.released("secondary_button")) {
            if (ig.game.buildQueue.isFull()) {
              ig.game.alerts.push({
                text: "Can't add to queue: queue is full.",
                time: 80
              });
            } else {
              ig.game.buildQueue.add(this);
            }
          }
          if (ig.input.released("primary_button") && this.queue.length > 0) {
            return ig.game.updatePlaceEntity(this.queue[0], this);
          }
        } else {
          return this.hovered = false;
        }
      },
      productionFinished: function(entity) {
        return this.queue.push(entity);
      },
      getBuildingImage: function() {
        return this.instance.animSheet.image;
      },
      buildingPlaced: function() {
        this.queue.shift();
        if (this.queue.length > 0) {
          return ig.game.updatePlaceEntity(this.queue[0], this);
        } else {
          return ig.game.updatePlaceEntity();
        }
      },
      draw: function() {
        if (this.hovered) {
          this.buttonBack.drawTile(this.x, this.y, 1, this.size);
        } else {
          this.buttonBack.drawTile(this.x, this.y, 0, this.size);
        }
        this.instance.animSheet.image.drawTile(this.x, this.y, 0, this.size);
        if (!this.enabled) {
          this.buttonBack.drawTile(this.x, this.y, 1, this.size);
        }
        return ig.game.font.draw(this.queue.length.toString(), this.x, this.y - 6);
      }
    });
    BuildQueue = ig.Class.extend({
      queueBack: new ig.Image("media/queue_button.png"),
      init: function(x, y) {
        this.x = x;
        this.y = y;
        this.tileSize = 16;
        this.queue = [];
        this.costCompleted = 0;
        return this.hover = null;
      },
      add: function(buildButton) {
        return this.queue.push([buildButton, ig.game.spawnEntity(buildButton.buildingClass, -100, -100)]);
      },
      isFull: function() {
        return this.queue.length >= 7;
      },
      update: function() {
        var _ref, _ref1, _ref2, _ref3;
        this.hover = null;
        if (this.queue.length > 0) {
          this.costCompleted += ig.game.production / 60.0;
          if (this.costCompleted >= this.queue[0][1].getProductionCost()) {
            this.queue[0][0].productionFinished(this.queue[0][1]);
            this.queue.shift();
            this.costCompleted = 0;
          }
          if ((this.x < (_ref = ig.input.mouse.x) && _ref < this.x + this.tileSize * this.queue.length)) {
            if ((this.y < (_ref1 = ig.input.mouse.y) && _ref1 < this.y + this.tileSize)) {
              this.hover = Math.floor((ig.input.mouse.x - this.x) / 16);
            }
          }
        }
        if ((this.hover != null) && (ig.input.released("primary_button") || ig.input.released("secondary_button"))) {
          [].splice.apply(this.queue, [(_ref2 = this.hover), this.hover - _ref2 + 1].concat(_ref3 = [])), _ref3;
          if (this.hover === 0) {
            return this.costCompleted = 0;
          }
        }
      },
      getScaledPercentDone: function() {
        return Math.max(Math.floor(this.costCompleted * 16.0 / this.queue[0][1].getProductionCost()), 0.00001);
      },
      drawQueueItem: function(button, i) {
        this.queueBack.drawTile(this.x + i * 16, this.y, 0, this.tileSize);
        button.getBuildingImage().drawTile(this.x + i * 16, this.y, 0, this.tileSize);
        if (i === 0) {
          return this.queueBack.draw(this.x, this.y - 6, 32, 0, this.getScaledPercentDone(), 6);
        }
      },
      draw: function() {
        var i, queueItem, _i, _len, _ref;
        _ref = this.queue;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          queueItem = _ref[i];
          this.drawQueueItem(queueItem[0], i);
        }
        if (this.hover != null) {
          return this.queueBack.drawTile(this.x + this.hover * 16, this.y, 1, this.tileSize);
        }
      }
    });
    advRobotics = {
      cost: 1000,
      enabled: true,
      researched: false,
      name: "Advanced Robotics",
      desc: "Awesome robots work the mines more efficiently than humans!",
      bonus: "Increases the efficiency of your mines.",
      quote: "Beep. Whiirrrrrrrrr.",
      onResearched: function() {
        return extremeRobotics.enabled = true;
      }
    };
    extremeRobotics = {
      cost: 2000,
      enabled: false,
      researched: false,
      name: "Extreme Environment Robotics",
      desc: "Remote control of robots under extreme conditions renders a whole new class          of exploratory and geology problems solvable.",
      bonus: "Further increases the efficiency of your mines. Enables construction of\nAsthenosphere Boreholes.",
      quote: "Beep. <lava bubble>. Whirrr.",
      onResearched: function() {
        return ig.game.buildButtons[4].enabled = true;
      }
    };
    highEnergyPhysics = {
      cost: 1000,
      enabled: true,
      researched: false,
      name: "High Energy Physics",
      desc: "Development of the tools and methods to handle high energy matter states gives          you the tools for discovering what the universe is really made of.",
      bonus: "Enables construction of Supercolliders.",
      quote: "But, but, the chance of forming a black hole is like really really small!",
      onResearched: function() {
        ig.game.buildButtons[5].enabled = true;
        return quantumComputing.enabled = true;
      }
    };
    quantumComputing = {
      cost: 2000,
      enabled: false,
      researched: false,
      name: "Quantum Computing",
      desc: "Understanding more of the subatomic particles of the universe, the first          reliable quantum computers are built and go into service.",
      bonus: "Enables construction of Quantum-Optical Comptrollers.",
      quote: "Wednesday, we'll calculate all the digits of Pi; Thursday, we should work on           that overdue 30-billion-node neural net, and Friday, what the hell, let's           simulate the universe.",
      onResearched: function() {
        ig.game.buildButtons[6].enabled = true;
        return unifiedTheory.enabled = true;
      }
    };
    theoryOfEverything = {
      cost: 3000,
      enabled: false,
      researched: false,
      name: "Theory of Everything",
      desc: "Using data from High Energy Physics and analysis tools from Quantum Computing,          the first truly universal theory of physics is discovered.",
      bonus: "Enables construction of Dome Generators.",
      quote: "It makes so much sense! Igor, why didn't we think of this before?!",
      onResearched: function() {
        ig.game.buildButtons[7].enabled = true;
        return secretsOfTheUniverse.enabled = true;
      }
    };
    secretsOfTheUniverse = {
      cost: 5000,
      enabled: false,
      researched: false,
      name: "Secrets of the Universe",
      desc: "???",
      bonus: "???",
      quote: "And there they were, the mortals, always rushing to the end of their hurried           lives. I saw everything, and it was sad and beautiful.",
      onResearched: function() {
        ig.game.winning = true;
        return ig.game.winCondition = "secrets";
      }
    };
    techs = [advRobotics, extremeRobotics, highEnergyPhysics, quantumComputing, theoryOfEverything, secretsOfTheUniverse];
    MyGame = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      panelBg: new ig.Image("media/blue_bg.png"),
      smallTextBg: new ig.Image("media/small_text_button_bg.png"),
      caretBg: new ig.Image("media/caret_button_bg.png"),
      init: function() {
        ig.input.bind(ig.KEY.MOUSE1, 'primary_button');
        ig.input.bind(ig.KEY.MOUSE2, 'secondary_button');
        ig.input.bind(ig.KEY.SPACE, "pause");
        this.paused = false;
        this.spawnEntity(BackGround, 0, 0);
        this.updatePlaceEntity(null);
        this.buildButtons = [new BuildingButton(61, 224, Mine), new BuildingButton(77, 224, Generator), new BuildingButton(93, 224, Factory), new BuildingButton(113, 224, ResearchCenter), new BuildingButton(129, 224, Borehole, false), new BuildingButton(145, 224, Supercollider, false), new BuildingButton(161, 224, QuantomOptoComptroller, false), new BuildingButton(177, 224, DomeGenerator, false)];
        this.alerts = [
          {
            text: "Welcome to Windmaster.",
            time: 120
          }
        ];
        this.hoverInfo = null;
        this.showingResearchPane = false;
        this.currentDisplayedTech = null;
        this.availableTechs = null;
        this.buildButtons[0].productionFinished(ig.game.spawnEntity(Mine, -100, -100));
        this.buildButtons[0].productionFinished(ig.game.spawnEntity(Mine, -100, -100));
        this.buildButtons[1].productionFinished(ig.game.spawnEntity(Generator, -100, -100));
        this.buildButtons[1].productionFinished(ig.game.spawnEntity(Generator, -100, -100));
        this.buildButtons[2].productionFinished(ig.game.spawnEntity(Factory, -100, -100));
        this.buildQueue = new BuildQueue(200, 224);
        this.updateEconomyState();
        this.researchGoal = {
          name: ""
        };
        this.buildMessage = "";
        return this.researchPaneButtonHovered = null;
      },
      updatePlaceEntity: function(placeEntity, buttonToUpdate) {
        this.buttonToUpdate = buttonToUpdate;
        if (this.placeEntity != null) {
          if (!this.placeEntity.placed) {
            this.placeEntity.pos.x = -300;
          }
        }
        this.placeEntity = placeEntity;
        if ((placeEntity != null) && (placeEntity.currentAnim != null)) {
          return this.placeEntity.currentAnim.alpha = 0.5;
        }
      },
      updateEconomyState: function() {
        var entity, placedEntities, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _results;
        this.energyProduced = 0;
        this.energyConsumed = 0;
        this.mineralsProduced = 0;
        this.mineralsConsumed = 0;
        this.production = 0;
        this.research = 0;
        placedEntities = (function() {
          var _i, _len, _ref, _results;
          _ref = this.entities;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            if (entity.placed) {
              _results.push(entity);
            }
          }
          return _results;
        }).call(this);
        for (_i = 0, _len = placedEntities.length; _i < _len; _i++) {
          entity = placedEntities[_i];
          this.energyProduced += entity.getEnergyProduced();
        }
        for (_j = 0, _len1 = placedEntities.length; _j < _len1; _j++) {
          entity = placedEntities[_j];
          this.energyConsumed += entity.getEnergyConsumed();
        }
        for (_k = 0, _len2 = placedEntities.length; _k < _len2; _k++) {
          entity = placedEntities[_k];
          this.mineralsProduced += entity.getMineralsProduced();
        }
        for (_l = 0, _len3 = placedEntities.length; _l < _len3; _l++) {
          entity = placedEntities[_l];
          this.mineralsConsumed += entity.getMineralsConsumed();
        }
        for (_m = 0, _len4 = placedEntities.length; _m < _len4; _m++) {
          entity = placedEntities[_m];
          this.production += entity.getProductionProduced();
        }
        _results = [];
        for (_n = 0, _len5 = placedEntities.length; _n < _len5; _n++) {
          entity = placedEntities[_n];
          _results.push(this.research += entity.getResearch());
        }
        return _results;
      },
      update: function() {
        var button, placeX, placeY, tech, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
        if (!this.paused) {
          this.updateEconomyState();
          this.hoverInfo = null;
          this.buildMessage = "";
          this.parent();
          _ref = this.buildButtons;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            button = _ref[_i];
            button.update();
          }
          this.buildQueue.update();
          if (this.researchGoal.cost != null) {
            this.researchCompleted += this.research / 60.0;
            if (this.researchCompleted > this.researchGoal.cost) {
              this.researchGoal.onResearched();
              this.researchGoal.researched = true;
              this.researchCompleted = 0;
              this.researchGoal = {
                name: ""
              };
            }
          }
          placeX = Math.floor(ig.input.mouse.x / 16) * 16;
          placeY = Math.floor(ig.input.mouse.y / 16) * 16;
          if (ig.input.released("primary_button") && !this.inGUI(placeX, placeY) && (this.placeEntity != null) && this.placeEntity.canPlace() && this.legalPlacement(placeX, placeY)) {
            this.placeEntity.place();
            this.buttonToUpdate.buildingPlaced();
          } else if (this.placeEntity) {
            this.placeEntity.pos.x = placeX;
            this.placeEntity.pos.y = placeY;
          }
          if (this.alerts.length > 0) {
            this.alerts[0].time -= 1;
            if (this.alerts[0].time <= 0) {
              this.alerts.shift();
            }
          }
          if (ig.input.released("primary_button") && (304 > (_ref1 = ig.input.mouse.x) && _ref1 > 58) && (212 > (_ref2 = ig.input.mouse.y) && _ref2 > 203)) {
            this.showingResearchPane = true;
            this.availableTechs = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = techs.length; _j < _len1; _j++) {
                tech = techs[_j];
                if (tech.enabled && !tech.researched) {
                  _results.push(tech);
                }
              }
              return _results;
            })();
            this.currentlyDisplayedTech = 0;
            if (this.availableTechs.length === 0) {
              this.currentDisplayedTech = -1;
            }
          }
          if (this.showingResearchPane) {
            this.researchPaneButtonHovered = null;
            if ((316 > (_ref3 = ig.input.mouse.x) && _ref3 >= 280)) {
              if ((10 > (_ref4 = ig.input.mouse.y) && _ref4 >= 2)) {
                this.researchPaneButtonHovered = "choose";
              } else if ((18 > (_ref5 = ig.input.mouse.y) && _ref5 >= 10)) {
                this.researchPaneButtonHovered = "close";
              }
            }
            if (this.researchPaneButtonHovered === "choose" && ig.input.released("primary_button")) {
              this.researchGoal = this.availableTechs[this.currentlyDisplayedTech];
              this.showingResearchPane = false;
              this.researchCompleted = 0;
            } else if (this.researchPaneButtonHovered === "close" && ig.input.released("primary_button")) {
              this.showingResearchPane = false;
            }
            this.availableResearchSwitchButtonHovered = null;
            if ((8 >= (_ref6 = ig.input.mouse.y) && _ref6 >= 1)) {
              if ((140 > (_ref7 = ig.input.mouse.x) && _ref7 >= 132)) {
                this.availableResearchSwitchButtonHovered = ">";
              } else if ((132 > (_ref8 = ig.input.mouse.x) && _ref8 >= 124)) {
                this.availableResearchSwitchButtonHovered = "<";
              }
            }
            if (this.availableResearchSwitchButtonHovered === "<" && ig.input.released("primary_button")) {
              this.currentlyDisplayedTech -= 1;
              if (this.currentlyDisplayedTech === -1) {
                this.currentlyDisplayedTech = this.availableTechs.length - 1;
              }
            } else if (this.availableResearchSwitchButtonHovered === ">" && ig.input.released("primary_button")) {
              this.currentlyDisplayedTech += 1;
              if (this.currentlyDisplayedTech >= this.availableTechs.length) {
                this.currentlyDisplayedTech = 0;
              }
            }
          }
        }
        if (ig.input.released("pause")) {
          return this.paused = !this.paused;
        }
      },
      inGUI: function(x, y) {
        return (x < 64 && y > 176) || y > 192;
      },
      legalPlacement: function(x, y) {
        var entity, sameSpot;
        sameSpot = (function() {
          var _i, _len, _ref, _results;
          _ref = this.entities;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            if (entity.pos.x === x && entity.pos.y === y) {
              _results.push(true);
            }
          }
          return _results;
        }).call(this);
        if (sameSpot.length > 1) {
          this.alerts.push({
            time: 120,
            text: "Can't place building there: space occupied."
          });
          return false;
        }
        return true;
      },
      draw: function() {
        var button, tech, _i, _len, _ref;
        this.parent();
        this.panelBg.draw(-32, 193);
        if (this.hoverInfo != null) {
          this.font.draw(this.hoverInfo, 61, 195);
        } else if (this.alerts.length > 0) {
          this.font.draw(this.alerts[0].text, 61, 195);
        }
        this.panelBg.draw(-16, 201);
        this.font.draw(sprintf("Research: %+.0d", this.research), 61, 203);
        this.font.draw("Goal: " + this.researchGoal.name, 140, 203);
        this.panelBg.draw(0, 209);
        this.font.draw("Build: " + this.buildMessage, 61, 212);
        _ref = this.buildButtons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.draw();
        }
        this.font.draw("Queue:", 200, 212);
        this.buildQueue.draw();
        this.panelBg.draw(-262, 181);
        this.font.draw("Minerals:", 1, 185);
        this.font.draw(sprintf("%.0d-%.0d=%+.0d", this.mineralsProduced, this.mineralsConsumed, this.mineralsProduced - this.mineralsConsumed), 1, 193);
        this.font.draw("Energy:", 1, 205);
        this.font.draw(sprintf("%.0d-%.0d=%+.0d", this.energyProduced, this.energyConsumed, this.energyProduced - this.energyConsumed), 1, 213);
        this.font.draw("Production:", 1, 225);
        this.font.draw(sprintf("%+.0d", this.production), 1, 233);
        if (this.showingResearchPane) {
          this.panelBg.draw(0, -190);
          if (this.availableResearchSwitchButtonHovered === "<") {
            this.caretBg.drawTile(124, 0, 1, 8);
          } else {
            this.caretBg.drawTile(124, 0, 0, 8);
          }
          if (this.availableResearchSwitchButtonHovered === ">") {
            this.caretBg.drawTile(132, 0, 1, 8);
          } else {
            this.caretBg.drawTile(132, 0, 0, 8);
          }
          this.font.draw("Available Research Goals:   < >", 3, 1);
          tech = this.availableTechs[this.currentlyDisplayedTech];
          this.font.draw(tech.name, 3, 15);
          this.font.draw(tech.bonus, 3, 25);
          if (this.researchPaneButtonHovered === "choose") {
            this.smallTextBg.drawTile(280, 2, 1, 36, 8);
          } else {
            this.smallTextBg.drawTile(280, 2, 0, 36, 8);
          }
          this.font.draw("CHOOSE", 298, 3, ig.Font.ALIGN.CENTER);
          if (this.researchPaneButtonHovered === "close") {
            this.smallTextBg.drawTile(280, 10, 1, 36, 8);
          } else {
            this.smallTextBg.drawTile(280, 10, 0, 36, 8);
          }
          this.font.draw("CLOSE", 298, 11, ig.Font.ALIGN.CENTER);
        }
        if (this.paused) {
          return this.pauseBlackout.draw(0, 0);
        }
      }
    });
    return ig.main('#canvas', MyGame, 60, 320, 240, 2);
  });

}).call(this);
