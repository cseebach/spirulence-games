// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('impact.game', 'impact.font').defines(function() {
    var BackGround, Borehole, BuildQueue, BuildingButton, DomeGenerator, Factory, Generator, Mine, MyGame, Placeable, QuantomOptoComptroller, ResearchCenter, Supercollider;
    Placeable = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      mineralsCost: 0,
      energyCost: 0,
      init: function(x, y, settings) {
        return this.parent(x, y, settings);
      },
      canPlace: function() {
        if (this.mineralsCost > ig.game.mineralsProduced - ig.game.mineralsConsumed) {
          return false;
        }
        if (this.energyCost > ig.game.energyProduced - ig.game.energyConsumed) {
          return false;
        }
        return true;
      },
      place: function() {
        ig.game.mineralsConsumed += this.mineralsCost;
        return ig.game.energyConsumed += this.energyCost;
      }
    });
    DomeGenerator = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/dome_generator.png", 16, 16),
      energyCost: 800,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
      }
    });
    QuantomOptoComptroller = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/qo_comptroller.png", 16, 16),
      energyCost: 20,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 1, 2, 3]);
      }
    });
    Supercollider = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/supercollider.png", 16, 16),
      energyCost: 50,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      }
    });
    ResearchCenter = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/research_center.png", 16, 16),
      energyCost: 10,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      }
    });
    Borehole = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/borehole.png", 16, 16),
      energyCost: 10,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      },
      place: function() {
        this.parent();
        return ig.game.mineralsProduced += 30;
      }
    });
    Generator = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet('media/generator.png', 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0, 1]);
      },
      place: function() {
        this.parent();
        return ig.game.energyProduced += 4;
      }
    });
    Mine = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/mine.png", 16, 16),
      energyCost: 1,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.2, [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0]);
      },
      place: function() {
        this.parent();
        return ig.game.mineralsProduced += 3;
      }
    });
    Factory = Placeable.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/factory.png", 16, 16),
      energyCost: 6,
      mineralsCost: 6,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.4, [0, 1]);
      },
      place: function() {
        this.parent();
        return ig.game.production += 3;
      }
    });
    BackGround = ig.Entity.extend({
      size: {
        x: 320,
        y: 240
      },
      zIndex: 50,
      animSheet: new ig.AnimationSheet("media/background.png", 320, 240),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0]);
      }
    });
    BuildingButton = ig.Class.extend({
      buttonBack: new ig.Image("media/button.png"),
      init: function(x, y, buildingClass, imagePath, buildCost, enabled) {
        this.x = x;
        this.y = y;
        this.size = 16;
        this.buildingClass = buildingClass;
        this.image = new ig.Image(imagePath);
        this.enabled = enabled != null ? enabled : true;
        this.hovered = false;
        this.buildCost = buildCost;
        return this.numberBuilt = 0;
      },
      update: function() {
        var _ref, _ref1;
        if ((this.x < (_ref = ig.input.mouse.x) && _ref < this.x + this.size) && (this.y < (_ref1 = ig.input.mouse.y) && _ref1 < this.y + this.size) && this.enabled) {
          this.hovered = true;
          if (ig.input.released("secondary_button")) {
            ig.game.buildQueue.add(this);
          }
          if (ig.input.released("primary_button")) {
            if (this.numberBuilt > 0) {
              return ig.game.updatePlaceEntity(this.buildingClass, this);
            }
          }
        } else {
          return this.hovered = false;
        }
      },
      productionFinished: function() {
        return this.numberBuilt += 1;
      },
      buildingBuilt: function() {
        this.numberBuilt -= 1;
        if (this.numberBuilt <= 0) {
          return ig.game.updatePlaceEntity(false, this);
        }
      },
      draw: function() {
        if (this.hovered) {
          this.buttonBack.drawTile(this.x, this.y, 1, this.size);
        } else {
          this.buttonBack.drawTile(this.x, this.y, 0, this.size);
        }
        this.image.drawTile(this.x, this.y, 0, this.size);
        if (!this.enabled) {
          this.buttonBack.drawTile(this.x, this.y, 1, this.size);
        }
        return ig.game.font.draw(this.numberBuilt.toString(), this.x, this.y - 6);
      }
    });
    BuildQueue = ig.Class.extend({
      queueBack: new ig.Image("media/queue_button.png"),
      init: function(x, y) {
        this.x = x;
        this.y = y;
        this.tileSize = 16;
        this.queue = [];
        return this.costCompleted = 0;
      },
      add: function(buildButton) {
        return this.queue.push(buildButton);
      },
      update: function() {
        if (this.queue.length > 0) {
          this.costCompleted += ig.game.production / 60.0;
          if (this.costCompleted >= this.queue[0].buildCost) {
            this.queue[0].productionFinished();
            this.queue.shift();
            return this.costCompleted = 0;
          }
        }
      },
      getPercentDone: function() {
        if (this.costCompleted > 0.0) {
          return this.costCompleted * 16.0 / this.queue[0].buildCost;
        } else {
          return 0.1;
        }
      },
      drawQueueItem: function(button, i) {
        this.queueBack.drawTile(this.x + i * 16, this.y, 0, this.tileSize);
        button.image.drawTile(this.x + i * 16, this.y, 0, this.tileSize);
        if (i === 0) {
          return this.queueBack.draw(this.x, this.y - 6, 32, 0, this.getPercentDone(), 6);
        }
      },
      draw: function() {
        var button, i, _i, _len, _ref, _results;
        _ref = this.queue;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          button = _ref[i];
          _results.push(this.drawQueueItem(button, i));
        }
        return _results;
      }
    });
    MyGame = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      leftPanelBg: new ig.Image("media/left_panel.png"),
      lowerPanelBg: new ig.Image("media/lower_panel.png"),
      init: function() {
        ig.input.bind(ig.KEY.MOUSE1, 'primary_button');
        ig.input.bind(ig.KEY.MOUSE2, 'secondary_button');
        ig.input.bind(ig.KEY.F, 'factory_placement');
        ig.input.bind(ig.KEY.M, 'mine_placement');
        ig.input.bind(ig.KEY.G, 'generator_placement');
        ig.input.bind(ig.KEY.B, 'borehole_placement');
        ig.input.bind(ig.KEY.R, 'research_placement');
        ig.input.bind(ig.KEY.S, 'supercollider_placement');
        ig.input.bind(ig.KEY.Q, 'qoc_placement');
        ig.input.bind(ig.KEY.D, 'dome_placement');
        this.spawnEntity(BackGround, 0, 0);
        this.updatePlaceEntity(false);
        this.buildButtons = [new BuildingButton(61, 224, Mine, "media/mine.png", 40), new BuildingButton(77, 224, Generator, "media/generator.png", 40), new BuildingButton(93, 224, Factory, "media/factory.png", 100), new BuildingButton(113, 224, ResearchCenter, "media/research_center.png", 200), new BuildingButton(129, 224, Borehole, "media/borehole.png", 1000, false), new BuildingButton(145, 224, Supercollider, "media/supercollider.png", 2000, false), new BuildingButton(161, 224, QuantomOptoComptroller, "media/qo_comptroller.png", 2000, false), new BuildingButton(177, 224, DomeGenerator, "media/dome_generator.png", 5000, false)];
        this.buildButtons[0].productionFinished();
        this.buildButtons[0].productionFinished();
        this.buildButtons[1].productionFinished();
        this.buildButtons[1].productionFinished();
        this.buildButtons[2].productionFinished();
        this.buildQueue = new BuildQueue(200, 224);
        this.energyProduced = 0;
        this.energyConsumed = 0;
        this.mineralsProduced = 0;
        this.mineralsConsumed = 0;
        return this.production = 0;
      },
      updatePlaceEntity: function(placeClass, buttonToUpdate) {
        this.buttonToUpdate = buttonToUpdate;
        this.placeClass = placeClass;
        if (this.placeEntity) {
          this.placeEntity.kill();
        }
        if (placeClass) {
          this.placeEntity = this.spawnEntity(this.placeClass, -100, -100);
          return this.placeEntity.currentAnim.alpha = 0.5;
        }
      },
      update: function() {
        var button, justPlaced, placeX, placeY, _i, _len, _ref;
        this.parent();
        _ref = this.buildButtons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.update();
        }
        this.buildQueue.update();
        this.minerals += this.mineralsPerSecond / 60.0;
        placeX = Math.floor(ig.input.mouse.x / 16) * 16;
        placeY = Math.floor(ig.input.mouse.y / 16) * 16;
        if (ig.input.released("primary_button") && this.legalPlacement(placeX, placeY)) {
          if (this.placeClass && this.placeEntity.canPlace()) {
            justPlaced = this.spawnEntity(this.placeClass, placeX, placeY);
            justPlaced.place();
            return this.buttonToUpdate.buildingBuilt();
          }
        } else if (this.placeEntity) {
          this.placeEntity.pos.x = placeX;
          return this.placeEntity.pos.y = placeY;
        }
      },
      legalPlacement: function(x, y) {
        if (x < 64) {
          return y < 176;
        } else {
          return y < 208;
        }
      },
      draw: function() {
        var button, _i, _len, _ref;
        this.parent();
        this.lowerPanelBg.draw(0, 209);
        this.font.draw("Build:", 61, 212);
        _ref = this.buildButtons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.draw();
        }
        this.buildQueue.draw();
        this.leftPanelBg.draw(0, 181);
        this.font.draw("Minerals:", 1, 185);
        this.font.draw(sprintf("%.0d-%.0d=%+.0d", this.mineralsProduced, this.mineralsConsumed, this.mineralsProduced - this.mineralsConsumed), 1, 193);
        this.font.draw("Energy:", 1, 205);
        this.font.draw(sprintf("%.0d-%.0d=%+.0d", this.energyProduced, this.energyConsumed, this.energyProduced - this.energyConsumed), 1, 213);
        this.font.draw("Production:", 1, 225);
        return this.font.draw(sprintf("%+.0d", this.production), 1, 233);
      }
    });
    return ig.main('#canvas', MyGame, 60, 320, 240, 2);
  });

}).call(this);
