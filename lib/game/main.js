// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('impact.game').defines(function() {
    var BackGround, Factory, Generator, Mine, MyGame;
    Generator = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet('media/generator.png', 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0, 1]);
      }
    });
    Mine = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/mine.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.2, [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0]);
      }
    });
    Factory = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/factory.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.4, [0, 1]);
      }
    });
    BackGround = ig.Entity.extend({
      size: {
        x: 320,
        y: 240
      },
      zIndex: 50,
      animSheet: new ig.AnimationSheet("media/background.png", 320, 240),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0]);
      }
    });
    MyGame = ig.Game.extend({
      bg: new ig.Image('media/background.png'),
      init: function() {
        ig.input.bind(ig.KEY.MOUSE1, 'place_building');
        ig.input.bind(ig.KEY.F, 'factory_placement');
        ig.input.bind(ig.KEY.M, 'mine_placement');
        ig.input.bind(ig.KEY.G, 'generator_placement');
        this.spawnEntity(BackGround, 0, 0);
        this.placeClass = Factory;
        this.updatePlaceEntity();
        this.totalEnergy = 20;
        return this.usedEnergy = 10;
      },
      updatePlaceEntity: function() {
        if (this.placeEntity) {
          this.placeEntity.kill();
        }
        this.placeEntity = this.spawnEntity(this.placeClass, -100, -100);
        return this.placeEntity.currentAnim.alpha = 0.5;
      },
      update: function() {
        var placeX, placeY;
        this.parent();
        placeX = Math.floor(ig.input.mouse.x / 16) * 16;
        placeY = Math.floor(ig.input.mouse.y / 16) * 16;
        if (ig.input.released("place_building")) {
          this.spawnEntity(this.placeClass, placeX, placeY);
        } else {
          this.placeEntity.pos.x = placeX;
          this.placeEntity.pos.y = placeY;
        }
        if (ig.input.released("factory_placement")) {
          this.placeClass = Factory;
          this.updatePlaceEntity();
        }
        if (ig.input.released("mine_placement")) {
          this.placeClass = Mine;
          this.updatePlaceEntity();
        }
        if (ig.input.released("generator_placement")) {
          this.placeClass = Generator;
          return this.updatePlaceEntity();
        }
      },
      draw: function() {
        return this.parent();
      }
    });
    return ig.main('#canvas', MyGame, 60, 320, 240, 2);
  });

}).call(this);
