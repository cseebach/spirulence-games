// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('impact.game', 'impact.font').defines(function() {
    var BackGround, Borehole, BuildingButton, DomeGenerator, Factory, Generator, Mine, MyGame, QuantomOptoComptroller, Queue, ResearchCenter, Supercollider;
    DomeGenerator = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/dome_generator.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
      },
      place: function() {}
    });
    QuantomOptoComptroller = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/qo_comptroller.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 1, 2, 3]);
      },
      place: function() {}
    });
    Supercollider = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/supercollider.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      },
      place: function() {}
    });
    ResearchCenter = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/research_center.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      },
      place: function() {}
    });
    Borehole = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/borehole.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim("idle", 0.2, [0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 0, 0]);
      },
      place: function() {}
    });
    Generator = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet('media/generator.png', 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0, 1]);
      },
      place: function() {
        return ig.game.totalEnergy += 10;
      }
    });
    Mine = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/mine.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.2, [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0]);
      },
      place: function() {
        return ig.game.mineralsPerSecond += 3;
      }
    });
    Factory = ig.Entity.extend({
      size: {
        x: 16,
        y: 16
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet("media/factory.png", 16, 16),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.4, [0, 1]);
      },
      place: function() {
        return ig.game.mineralsPerSecond -= 3;
      }
    });
    BackGround = ig.Entity.extend({
      size: {
        x: 320,
        y: 240
      },
      zIndex: 50,
      animSheet: new ig.AnimationSheet("media/background.png", 320, 240),
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.addAnim('idle', 0.1, [0]);
      }
    });
    BuildingButton = ig.Class.extend({
      buttonBack: new ig.Image("media/button.png"),
      init: function(x, y, buildingClass, imagePath, enabled) {
        this.x = x;
        this.y = y;
        this.size = 16;
        this.buildingClass = buildingClass;
        this.image = new ig.Image(imagePath);
        return this.enabled = enabled != null ? enabled : true;
      },
      update: function() {},
      draw: function() {
        this.buttonBack.drawTile(this.x, this.y, 0, this.size);
        this.image.drawTile(this.x, this.y, 0, this.size);
        if (!this.enabled) {
          return this.buttonBack.drawTile(this.x, this.y, 0, this.size);
        }
      }
    });
    Queue = ig.Class.extend({
      init: function(x, y) {
        this.x = x;
        this.y = y;
        this.tileSize = 16;
        return this.queue = [];
      }
    });
    MyGame = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      leftPanelBg: new ig.Image("media/left_panel.png"),
      lowerPanelBg: new ig.Image("media/lower_panel.png"),
      init: function() {
        ig.input.bind(ig.KEY.MOUSE1, 'primary_button');
        ig.input.bind(ig.KEY.MOUSE2, 'secondary_button');
        ig.input.bind(ig.KEY.F, 'factory_placement');
        ig.input.bind(ig.KEY.M, 'mine_placement');
        ig.input.bind(ig.KEY.G, 'generator_placement');
        ig.input.bind(ig.KEY.B, 'borehole_placement');
        ig.input.bind(ig.KEY.R, 'research_placement');
        ig.input.bind(ig.KEY.S, 'supercollider_placement');
        ig.input.bind(ig.KEY.Q, 'qoc_placement');
        ig.input.bind(ig.KEY.D, 'dome_placement');
        this.spawnEntity(BackGround, 0, 0);
        this.updatePlaceEntity(Factory);
        this.buildButtons = [new BuildingButton(61, 224, Mine, "media/mine.png"), new BuildingButton(77, 224, Generator, "media/generator.png"), new BuildingButton(93, 224, Factory, "media/factory.png"), new BuildingButton(113, 224, ResearchCenter, "media/research_center.png"), new BuildingButton(129, 224, Borehole, "media/borehole.png", false), new BuildingButton(145, 224, Supercollider, "media/supercollider.png", false), new BuildingButton(161, 224, QuantomOptoComptroller, "media/qo_comptroller.png", false), new BuildingButton(177, 224, DomeGenerator, "media/dome_generator.png", false)];
        this.totalEnergy = 20;
        this.usedEnergy = 10;
        this.minerals = 100;
        return this.mineralsPerSecond = 0;
      },
      updatePlaceEntity: function(placeClass) {
        this.placeClass = placeClass;
        if (this.placeEntity) {
          this.placeEntity.kill();
        }
        this.placeEntity = this.spawnEntity(this.placeClass, -100, -100);
        return this.placeEntity.currentAnim.alpha = 0.5;
      },
      update: function() {
        var button, justPlaced, placeX, placeY, _i, _len, _ref;
        this.parent();
        _ref = this.buildButtons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.update();
        }
        this.minerals += this.mineralsPerSecond / 60.0;
        placeX = Math.floor(ig.input.mouse.x / 16) * 16;
        placeY = Math.floor(ig.input.mouse.y / 16) * 16;
        if (ig.input.released("place_building")) {
          justPlaced = this.spawnEntity(this.placeClass, placeX, placeY);
          return justPlaced.place();
        } else {
          this.placeEntity.pos.x = placeX;
          return this.placeEntity.pos.y = placeY;
        }
      },
      draw: function() {
        var button, _i, _len, _ref;
        this.parent();
        this.lowerPanelBg.draw(0, 209);
        this.font.draw("Build:", 61, 215);
        _ref = this.buildButtons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.draw();
        }
        this.leftPanelBg.draw(0, 181);
        this.font.draw("Minerals:", 1, 185);
        this.font.draw(sprintf("%.0d (%+.0d)", this.minerals, this.mineralsPerSecond), 1, 193);
        this.font.draw("Energy Used:", 1, 205);
        return this.font.draw(sprintf("%.0d/%.0d", this.usedEnergy, this.totalEnergy), 1, 213);
      }
    });
    return ig.main('#canvas', MyGame, 60, 320, 240, 2);
  });

}).call(this);
